{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CouseraTraining-DF2022"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cousera_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "adf-container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "AGE",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "ADDRESS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customer.csv",
						"folderPath": "Cousera-Input",
						"container": "adf-container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "AGE",
						"type": "String"
					},
					{
						"name": "GENDER",
						"type": "String"
					},
					{
						"name": "ADDRESS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Order.csv",
						"folderPath": "Cousera-Input",
						"container": "adf-container1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "AMOUNT",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "order",
								"type": "DatasetReference"
							},
							"name": "order"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          AMOUNT as integer,",
						"          ORDER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"customer derive({FULL NAME} = FIRST_NAME+ \" \"+LAST_NAME) ~> derivedColumn1",
						"derivedColumn1, order join(customer@CUSTOMER_ID == order@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CUSTOMER_ID = customer@CUSTOMER_ID,",
						"          {FULL NAME},",
						"          AGE,",
						"          GENDER,",
						"          ADDRESS,",
						"          ORDER_ID,",
						"          AMOUNT,",
						"          ORDER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(GENDER == \"Male\",",
						"     disjoint: false) ~> split1@(malecustomers, femalecustomers)",
						"split1@malecustomers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['male_customer_data.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@femalecustomers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['female_customers_data.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/order')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_derived')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(ADDRESS = upper(ADDRESS),",
						"          {FULL NAME} = FIRST_NAME + \" \" + LAST_NAME) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['derived_column_output.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_filterandsort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "order",
								"type": "DatasetReference"
							},
							"name": "order"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filtercustomerbyage"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          AMOUNT as integer,",
						"          ORDER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"customer derive({FULL NAME} = FIRST_NAME+ \" \"+LAST_NAME) ~> derivedColumn1",
						"derivedColumn1, order join(customer@CUSTOMER_ID == order@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CUSTOMER_ID = customer@CUSTOMER_ID,",
						"          {FULL NAME},",
						"          AGE,",
						"          GENDER,",
						"          ADDRESS,",
						"          ORDER_ID,",
						"          AMOUNT,",
						"          ORDER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(AGE > 25) ~> filtercustomerbyage",
						"filtercustomerbyage sort(desc(ORDER_DATE, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['filterandsort.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/order')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "order",
								"type": "DatasetReference"
							},
							"name": "order"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          AMOUNT as integer,",
						"          ORDER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"customer, order join(customer@CUSTOMER_ID == order@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          AGE,",
						"          ADDRESS,",
						"          ORDER_ID,",
						"          AMOUNT,",
						"          ORDER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['join.output.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/order')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"customer select(mapColumn(",
						"          ID = CUSTOMER_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          GENDER,",
						"          AGE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['select_output.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/simple_mapping_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "order",
								"type": "DatasetReference"
							},
							"name": "order"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "cousera_output",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "split1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as integer,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"source(output(",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          AMOUNT as string,",
						"          ORDER_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"customer derive(AGE = AGE + 5) ~> derivedColumn1",
						"derivedColumn1, order join(customer@CUSTOMER_ID == order@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          CUSTOMER_ID = customer@CUSTOMER_ID,",
						"          FIRST_NAME,",
						"          AGE,",
						"          ADDRESS,",
						"          ORDER_ID,",
						"          AMOUNT,",
						"          ORDER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 split(AGE < 35,",
						"     disjoint: false) ~> split1@(agebelow35, ageaboveorequals35)",
						"split1@agebelow35 sort(asc(AGE, true)) ~> sort1",
						"split1@ageaboveorequals35 sort(desc(AGE, true),",
						"     partitionBy('hash', 1)) ~> sort2",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['customers_below_35.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CUSTOMER_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          AGE as string,",
						"          GENDER as string,",
						"          ADDRESS as string",
						"     ),",
						"     partitionFileNames:['customers_above_35'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/order')]",
				"[concat(variables('factoryId'), '/datasets/cousera_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_conditional_split",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"order": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_derived')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_derived",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_derived",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_derived')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_filterandsort')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_filterandsort",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_filterandsort",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"order": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_filterandsort')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_join",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"order": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_select",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_simple_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "simple_mapping_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "simple_mapping_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"order": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/simple_mapping_dataflow')]"
			]
		}
	]
}